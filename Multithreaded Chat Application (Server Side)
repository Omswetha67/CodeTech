/*Develop a Java client-server chat application using sockets and multithreading.
 How it Works:
 This is a basic server that listens for multiple clients. Each client is handled in a separate thread, and
 messages are broadcast to all connected clients.
 Expected Output:
 Server started...
 [Client1 connected]
 [Client2 connected]
 Client1: Hello!
 Client2: Hi*/

import java.io.*; 
import java.net.*; 
import java.util.*;
 public class ChatServer {
    private static Set<PrintWriter> clientWriters = new HashSet<>();
    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(1234);
        System.out.println("Server started...");
        while (true) {
            Socket socket = serverSocket.accept();
            new ClientHandler(socket).start();
        }
    }
    private static class ClientHandler extends Thread {
        private Socket socket;
        private PrintWriter out;
        public ClientHandler(Socket socket) {
            this.socket = socket;
        }
        public void run() {
            try {
                BufferedReader in = new BufferedReader(new
 InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);
                synchronized (clientWriters) {
                    clientWriters.add(out);
                }
                String message;
                while ((message = in.readLine()) != null) {
                    for (PrintWriter writer : clientWriters) {
                        writer.println(message);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
 }
